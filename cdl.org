#+TITLE:     Cropland Data Layer
#+AUTHOR:    Neil Best
#+EMAIL:     nbest@ci.uchicago.edu
#+DATE:      2012-05-04 Fri
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+PROPERTY: session *R*

* test the samples from the CropScape Developer Guide

[[http://nassgeodata.gmu.edu/CropScape/devhelp/help.html]]

[[http://nassgeodata.gmu.edu:8080/axis2/services/CDLService/GetCDLFile?year=2009&fips=19015]]

#+begin_src R
  library( RCurl)
  library( XML)
  library( raster)
  
  queryUrl <- "http://nassgeodata.gmu.edu:8080/axis2/services/CDLService/GetCDLFile?year=2009&fips=19015"
  
  fileUrl <-
    xpathSApply( xmlInternalTreeParse( getURL( queryUrl)),
                "//returnURL", fun= xmlValue, simplify= TRUE)
  
  fn <- basename( fileUrl)
  
  download.file( fileUrl, fn, mode= "wb")
  
  r <- raster( fn)
  
  NAvalue( r)
  
  GDALinfo( fn)
#+end_src

* create the list of county FIPS codes

#+begin_src R
  library( foreign)
  library( foreach)
  library( doMC)
  
  registerDoMC()
  
  tiger <- read.dbf( "tiger/tl_2011_us_county.dbf")
  
  cdlFips <- tiger[ !str_detect( tiger$STATEFP, "^(02|15|6.|7.)"),
               c( "STATEFP", "COUNTYFP")]
  
  cdlFips <- sort( with( cdlFips, paste( STATEFP, COUNTYFP, sep= "")))
  names( cdlFips) <- cdlFips
  
  state <- read.dbf( "tiger/tl_2011_us_state.dbf")
#+end_src

* define a function that downloads the data by year, county FIPS

#+begin_src R
  library( RCurl)
  library( XML)
  
  downloadCdlCounty <- function( fips= "19015", year= "2009", overwrite= FALSE) {
    queryUrlFormat <- "http://nassgeodata.gmu.edu:8080/axis2/services/CDLService/GetCDLFile?year=%s&fips=%s"
    queryUrl <- sprintf( queryUrlFormat, year, fips)
    queryXml <- getURL( queryUrl)
    fileUrl <-
      xpathSApply( xmlInternalTreeParse( queryXml),
                  "//returnURL", fun= xmlValue, simplify= TRUE)
    list( queryXml,
          try( silent= TRUE,
            {
              fn <- sprintf( "tif/%s", basename( fileUrl))
              if( !file.exists( fn) || overwrite) {
                download.file( fileUrl, fn, mode= "wb", quiet= TRUE)
              }
              fn
            } )
         )
  }
  
  cdl2008 <- llply(  cdlFips, downloadCdlCounty, year="2008", .parallel= TRUE)
  cdl2006 <- llply( cdlFips, downloadCdlCounty, year="2006", .parallel= TRUE)
  
#+end_src

The CDL web service seems to have triansient failures such that not
all data downloads succeed on the first attempt.  There should be 1270
files for 2006 and 3109 files for 2008.

** TODO write a test that indicates whether all data appeared


* write out the frequency tables for each county

#+begin_src R
  cdlTifs <- list.files( "tif", patt= "^CDL.*tif$", full.names= TRUE)
  
  writeFreqCsv <- function( tif) {
    r <- raster( tif)
    freqCsv <- sprintf( "freq/%s",
                       str_replace( basename( filename( r)),
                                   "tif", "csv"))
    write.csv( freq( r), file= freqCsv, row.names= FALSE)
    freqCsv
  }
  
  freqCsvs <- llply( cdlTifs, writeFreqCsv, .parallel= TRUE)
#+end_src

  
* parse the metadata for crop labels

#+begin_src R
  library( XML)
  library( stringr)
  
  cdlMeta <-
    xpathSApply( xmlInternalTreeParse( "metadata/cdlmeta_56m_r_ar_2008.xml"),
                "//eadetcit", fun= xmlValue, simplify= TRUE)
  
  cdlMeta <- unlist( str_split( cdlMeta, "\\n"))
  
  pattern <- "^>[[:space:]]+\"([0-9]+)\"[[:space:]]+(.*)$"
  
  cdlMeta <-
    data.frame( do.call( rbind,
                        str_match_all( cdlMeta, pattern))[, c( 2, 3)],
               stringsAsFactors= FALSE)
  colnames( cdlMeta) <- c( "code", "cover")
  rownames( cdlMeta) <- cdlMeta$code
  
  simpleLevels <- c( "Corn", "Soybeans", "Alfalfa",
                    "Other Hay/Non Alfalfa", "Switchgrass",
                    "Pasture/Grass", "Pasture/Hay",
                    "Fallow/Idle Cropland", "Dbl Crop Corn/Soybeans",
                    "Dbl Crop Corn/Other", "Dbl Crop Soybeans/Other",
                    "Wheat", "Other Crops", "Other")
  
  wheatLevels <- c( "Durum Wheat", "Spring Wheat", "Winter Wheat")
  
  nonCropLevels <- c( "Clouds/No Data", "Developed", "Water",
                     "Wetlands", "Nonag/Undefined", "Aquaculture",
                     "Open Water", "Perennial Ice/Snow",
                     "Developed/Open Space", "Developed/Low Intensity",
                     "Developed/Med Intensity",
                     "Developed/High Intensity", "Barren",
                     "Forest", "Deciduous Forest", "Evergreen Forest",
                     "Mixed Forest", "Shrubland",
                     "Grassland Herbaceous",
                     "Woody Wetlands", "Herbaceous Wetlands")
  
  dblCornOtherPatt <- "^Dbl Crop (Oats|Barley|WinWht)/Corn"
  dblSoyOtherPatt <- "^Dbl Crop (Soybeans/(Cotton|Oats)|(WinWht|Barley)/Soybeans)"
  
  cdlMeta <-
    within( cdlMeta[ cdlMeta$code != 0, ], {
      simple <- factor( rep( "Other Crops", length( code)),
                       levels= simpleLevels)
      simple[ cover %in% simpleLevels] <- cover[ cover %in% simpleLevels]
      simple[ cover %in% wheatLevels] <- "Wheat"
      simple[ cover %in% nonCropLevels] <- "Other"
      simple[ str_detect( cover, dblCornOtherPatt)] <- "Dbl Crop Corn/Other"
      simple[ str_detect( cover, dblSoyOtherPatt)] <- "Dbl Crop Soybeans/Other"
    })
  
#+end_src

#+RESULTS:
|   1 | Corn                        | Corn                    |
|   2 | Cotton                      | Other Crops             |
|   3 | Rice                        | Other Crops             |
|   4 | Sorghum                     | Other Crops             |
|   5 | Soybeans                    | Soybeans                |
|   6 | Sunflower                   | Other Crops             |
|  10 | Peanuts                     | Other Crops             |
|  11 | Tobacco                     | Other Crops             |
|  12 | Sweet Corn                  | Other Crops             |
|  13 | Pop or Orn Corn             | Other Crops             |
|  14 | Mint                        | Other Crops             |
|  21 | Barley                      | Other Crops             |
|  22 | Durum Wheat                 | Wheat                   |
|  23 | Spring Wheat                | Wheat                   |
|  24 | Winter Wheat                | Wheat                   |
|  25 | Other Small Grains          | Other Crops             |
|  26 | Dbl Crop WinWht/Soybeans    | Dbl Crop Soybeans/Other |
|  27 | Rye                         | Other Crops             |
|  28 | Oats                        | Other Crops             |
|  29 | Millet                      | Other Crops             |
|  30 | Speltz                      | Other Crops             |
|  31 | Canola                      | Other Crops             |
|  32 | Flaxseed                    | Other Crops             |
|  33 | Safflower                   | Other Crops             |
|  34 | Rape Seed                   | Other Crops             |
|  35 | Mustard                     | Other Crops             |
|  36 | Alfalfa                     | Alfalfa                 |
|  37 | Other Hay/Non Alfalfa       | Other Hay/Non Alfalfa   |
|  38 | Camelina                    | Other Crops             |
|  39 | Buckwheat                   | Other Crops             |
|  41 | Sugarbeets                  | Other Crops             |
|  42 | Dry Beans                   | Other Crops             |
|  43 | Potatoes                    | Other Crops             |
|  44 | Other Crops                 | Other Crops             |
|  45 | Sugarcane                   | Other Crops             |
|  46 | Sweet Potatoes              | Other Crops             |
|  47 | Misc Vegs & Fruits          | Other Crops             |
|  48 | Watermelons                 | Other Crops             |
|  49 | Onions                      | Other Crops             |
|  50 | Cucumbers                   | Other Crops             |
|  51 | Chick Peas                  | Other Crops             |
|  52 | Lentils                     | Other Crops             |
|  53 | Peas                        | Other Crops             |
|  54 | Tomatoes                    | Other Crops             |
|  55 | Caneberries                 | Other Crops             |
|  56 | Hops                        | Other Crops             |
|  57 | Herbs                       | Other Crops             |
|  58 | Clover/Wildflowers          | Other Crops             |
|  59 | Sod/Grass Seed              | Other Crops             |
|  60 | Switchgrass                 | Switchgrass             |
|  61 | Fallow/Idle Cropland        | Fallow/Idle Cropland    |
|  62 | Pasture/Grass               | Pasture/Grass           |
|  63 | Forest                      | Other                   |
|  64 | Shrubland                   | Other                   |
|  65 | Barren                      | Other                   |
|  66 | Cherries                    | Other Crops             |
|  67 | Peaches                     | Other Crops             |
|  68 | Apples                      | Other Crops             |
|  69 | Grapes                      | Other Crops             |
|  70 | Christmas Trees             | Other Crops             |
|  71 | Other Tree Crops            | Other Crops             |
|  72 | Citrus                      | Other Crops             |
|  74 | Pecans                      | Other Crops             |
|  75 | Almonds                     | Other Crops             |
|  76 | Walnuts                     | Other Crops             |
|  77 | Pears                       | Other Crops             |
|  81 | Clouds/No Data              | Other                   |
|  82 | Developed                   | Other                   |
|  83 | Water                       | Other                   |
|  87 | Wetlands                    | Other                   |
|  88 | Nonag/Undefined             | Other                   |
|  92 | Aquaculture                 | Other                   |
| 111 | Open Water                  | Other                   |
| 112 | Perennial Ice/Snow          | Other                   |
| 121 | Developed/Open Space        | Other                   |
| 122 | Developed/Low Intensity     | Other                   |
| 123 | Developed/Med Intensity     | Other                   |
| 124 | Developed/High Intensity    | Other                   |
| 131 | Barren                      | Other                   |
| 141 | Deciduous Forest            | Other                   |
| 142 | Evergreen Forest            | Other                   |
| 143 | Mixed Forest                | Other                   |
| 152 | Shrubland                   | Other                   |
| 171 | Grassland Herbaceous        | Other                   |
| 181 | Pasture/Hay                 | Pasture/Hay             |
| 190 | Woody Wetlands              | Other                   |
| 195 | Herbaceous Wetlands         | Other                   |
| 204 | Pistachios                  | Other Crops             |
| 205 | Triticale                   | Other Crops             |
| 206 | Carrots                     | Other Crops             |
| 207 | Asparagus                   | Other Crops             |
| 208 | Garlic                      | Other Crops             |
| 209 | Cantaloupes                 | Other Crops             |
| 210 | Prunes                      | Other Crops             |
| 211 | Olives                      | Other Crops             |
| 212 | Oranges                     | Other Crops             |
| 213 | Honeydew Melons             | Other Crops             |
| 214 | Broccoli                    | Other Crops             |
| 216 | Peppers                     | Other Crops             |
| 217 | Pomegranates                | Other Crops             |
| 218 | Nectarines                  | Other Crops             |
| 219 | Greens                      | Other Crops             |
| 220 | Plums                       | Other Crops             |
| 221 | Strawberries                | Other Crops             |
| 222 | Squash                      | Other Crops             |
| 223 | Apricots                    | Other Crops             |
| 224 | Vetch                       | Other Crops             |
| 225 | Dbl Crop WinWht/Corn        | Dbl Crop Corn/Other     |
| 226 | Dbl Crop Oats/Corn          | Dbl Crop Corn/Other     |
| 227 | Lettuce                     | Other Crops             |
| 229 | Pumpkins                    | Other Crops             |
| 230 | Dbl Crop Lettuce/Durum Wht  | Other Crops             |
| 231 | Dbl Crop Lettuce/Cantaloupe | Other Crops             |
| 232 | Dbl Crop Lettuce/Cotton     | Other Crops             |
| 233 | Dbl Crop Lettuce/Barley     | Other Crops             |
| 234 | Dbl Crop Durum Wht/Sorghum  | Other Crops             |
| 235 | Dbl Crop Barley/Sorghum     | Other Crops             |
| 236 | Dbl Crop WinWht/Sorghum     | Other Crops             |
| 237 | Dbl Crop Barley/Corn        | Dbl Crop Corn/Other     |
| 238 | Dbl Crop WinWht/Cotton      | Other Crops             |
| 239 | Dbl Crop Soybeans/Cotton    | Dbl Crop Soybeans/Other |
| 240 | Dbl Crop Soybeans/Oats      | Dbl Crop Soybeans/Other |
| 241 | Dbl Crop Corn/Soybeans      | Dbl Crop Corn/Soybeans  |
| 242 | Blueberries                 | Other Crops             |
| 243 | Cabbage                     | Other Crops             |
| 244 | Cauliflower                 | Other Crops             |
| 245 | Celery                      | Other Crops             |
| 246 | Radishes                    | Other Crops             |
| 247 | Turnips                     | Other Crops             |
| 248 | Eggplants                   | Other Crops             |
| 249 | Gourds                      | Other Crops             |
| 250 | Cranberries                 | Other Crops             |
| 254 | Dbl Crop Barley/Soybeans    | Dbl Crop Soybeans/Other |


* aggregate and cross-tabulate hectares by state and county

** TODO subtrees depend on this prelude

#+begin_src R
  library( reshape2)
  library( stringr)
  
  freqFiles <- list.files( "freq", full.names= TRUE)
  
  freqRegex <- "^freq/CDL_([0-9]{4})_([0-9]{2})([0-9]{3})\\.csv"
  freqMeta <- str_match( freqFiles, freqRegex)
  
  
  
  loadFreqFile <- function( freqMeta) {
    freqDf <- read.csv( freqMeta[ 1],
                       col.names= c( "cdl", "n"))
    within( freqDf, {
      year <- freqMeta[ 2]
      stfips <- freqMeta[ 3]
      cofips <- freqMeta[ 4]})
  }
  
  roundSum <- function( x) round( sum( x))
  
  freqDf <- adply( freqMeta, 1, loadFreqFile, .parallel= TRUE)[, -1]
#+end_src


** aggregate original categories

#+begin_src R
  freqDf <- within( freqDf, ha <- n * 56^2 / 10^4)
  
  areaState <- ddply( freqDf, .( year, stfips, cdl),
                     colwise( roundSum, c( "n", "ha")))
  
  ## write out AR summary to look for weird switchgrass figures
  
  write.csv( with( areaState, areaState[ stfips == "05" & !is.na( cdl),]),
            file="AR.csv", row.names= FALSE)
#+end_src

   

*** figure out what is going on with Arkansas switchgrass

#+begin_src R
  arSwitch <- with( freqDf, freqDf[ !is.na( cdl)
                                   & cdl == 62
                                   & stfips == "05",])
  
  arSwitchCt <- within( dcast( arSwitch, cofips ~ year,
                              value.var= "n", fill= 0),
                       diff <- `2008` - `2006`)
  
  rasterFipsYear <- function( year, stfips, cofips) {
    raster( sprintf( "tif/CDL_%s_%s%s.tif", year, stfips, cofips))
  }
  
  
#+end_src

** aggregate simplified categories

#+begin_src R
  freqDf <- within( freqDf[ !is.na( freqDf$cdl), ], {
    simple <- cdlMeta[ as.character( cdl), "simple"]
    simple[ is.na( simple)] <- "Other"
    ha <- n *56^2 /10^4
  })
  
  
  areaStateCt <- dcast( freqDf, year + stfips ~ simple,
                      value.var= "ha",
                      fun.aggregate= roundSum,
                      margins= c( "stfips", "simple"))
  write.csv( areaStateCt, "cdlStateSimple.csv", row.names= FALSE)
  
  
  
  areaCountyCt <- dcast( freqDf, year + stfips + cofips ~ simple,
                       value.var= "ha",
                       fun.aggregate= roundSum,
                       margins= c( "stfips", "cofips", "simple"))
  write.csv( areaCountyCt, "cdlCountySimple.csv", row.names= FALSE)
  
  zip( "cdlSimple.zip", list.files( patt= "^cdl(County|State)Simple.csv"))
#+end_src

** TODO round hectares after aggregation

* cross-tabulate 5' grid with each county

#+begin_src R
  world <- raster()
  res( world) <- 5/60
  world[] <- 1:ncell(world)
  
  registerDoMC( cores= 8)
  
  setOptions( datatype= "INT4U")
  
  writeGridCrosstab <- function( tif) {
    r <- raster( tif)
    grid <- projectRaster( world, r, method= "ngb", datatype= "INT4U")
    m <- mask( grid, r, datatype= "INT4U")
    ct <- crosstab( m, r, long= TRUE)
    colnames( ct) <- c( "grid", "cdl", "n")
    gridCsv <- sprintf( "grid/%s",
                       str_replace( basename( filename( r)),
                                     "tif", "csv"))
    with( ct, write.csv( ct[ n != 0, ], file= gridCsv, row.names= FALSE))
    gc()
    gridCsv
  }
  
  gridCsvs <- llply( cdlTifs, writeGridCrosstab, .parallel= TRUE)
#+end_src


* create 5' masks
  This step depends on `make mask`.

#+begin_src R :tangle aeaGrid.R
  library( raster)
  library( rgdal)
  
  world <- raster()
  res( world) <- 5/60
  world[] <- 1:ncell( world)
  
  geoMask <- raster( "mask/CDL_2008.tif")
  NAvalue(geoMask) <- 255
  
  cdlCells <- mask( crop( world, geoMask),
                   geoMask,
                   filename= "mask/cdlCells.tif",
                   overwrite= TRUE)
  
  cdlTiles <- readOGR( "shp/cdl.shp", "cdl")
  
  ##
  ## too slow!
  ##
  ## cdlCellsAea <- projectRaster( cdlCells, res= 56, crs= cdlProj,
  ##                              method= "ngb",
  ##                              filename= "mask/cdlCellsAea.tif",
  ##                              datatype= "INT4U")
  
  cdlCellsAea <- projectRaster( cdlCells, crs= cdlProj,
                               method= "ngb",
                               filename= "mask/cdlCellsAea.tif",
                               overwrite= TRUE,
                               datatype= "INT4U")
  
  system( sprintf( "gdalwarp -q -overwrite -t_srs '%s' -tr 56 56 -tap -ot UInt32 -dstnodata 0 -multi mask/cdlCells.tif mask/cdlCellsAea.tif", proj4string( cdlTiles)))
  
  system( sprintf( "gdalwarp -q -overwrite -t_srs '%s' -tr 56 56 -te %s -ot UInt32 -dstnodata 0 -multi mask/cdlCells.tif mask/cdlCellsAeaNoTap.tif",
                  proj4string( cdlTiles),
                  paste( matrix( bbox( cdlTiles), nrow=1), collapse= " ")))
  
  paste( matrix( bbox( cdlTiles), nrow=1), collapse= " ")
  
  cdlCellsAea <- raster( "mask/cdlCellsAea.tif")
  
  cdlCellsFreq <- freq( cdlCellsAea)
  
  colnames( cdlCellsFreq) <- c( "grid", "n")
  write.csv( cdlCellsFreq, "mask/cdlCellsFreq.csv", row.names= FALSE)
  
  tifRegex <- "^tif/CDL_([0-9]{4})_([0-9]{2})([0-9]{3})\\.tif"
  tifMeta <- str_match( cdlTifs, tifRegex)
  
  countPixelsEntireCells <- function( tifMeta) {
    gc()
    cdl <- raster( tifMeta[ 1])
    cells <- projectRaster( world, cdl, method= "ngb", datatype= "INT4U")
    worldMask <- raster( world)
    allCells <- unique( cells[ ])
    worldMask[ allCells] <- 1
    entireCells <- trim( worldMask)
    xy <- c( xmin( entireCells),
            ymin( entireCells),
            xmax( entireCells),
            ymax( entireCells))
    coords <-
      matrix( c( xy,
                xy[ c( 1, 4, 3, 2)]),
             ncol=2,
             byrow= TRUE)
    newExtent <-
      extent( spTransform( SpatialPoints( coords,
                                         projection( world, asText= FALSE)),
                          projection( cdl, asText= FALSE)))
    newCells <- expand( raster( cdl), newExtent)
    newCells <- projectRaster( world, newCells, method= "ngb", datatype= "INT4U")
    df <- data.frame( freq( newCells))
    colnames( df) <- c( "cell", "n")
    cellsCsv <- sprintf( "cells/%s",
                       str_replace( basename( filename( cdl)),
                                   "tif", "csv"))  
    df <- within( df[ df$cell %in% allCells, ], {
      year <- tifMeta[ 2]
      stfips <- tifMeta[ 3]
      cofips <- tifMeta[ 4]})
    write.csv( df, file= cellsCsv, row.names= FALSE)
    cellsCsv
  }
  
  
  cellPixels <- alply( tifMeta, 1, countPixelsEntireCells, .parallel= TRUE)
  
  cellPixels <- alply( tifMeta[ -(1:1449),], 1, countPixelsEntireCells, .parallel= TRUE)
#+end_src


* aggregate and cross-tabulate fractions by 5' grid cell

depends on cdlMeta loaded above

#+begin_src R
  library( Hmisc)
  library( reshape2)
  library( stringr)
  library( plyr)
  library( doMC); registerDoMC( cores= 4)
  
  gridFiles <- list.files( "grid", full.names= TRUE)
  gridRegex <- "^grid/CDL_([0-9]{4})_([0-9]{2})([0-9]{3})\\.csv"
  gridMeta <- str_match( gridFiles, gridRegex)
  
  loadGridFile <- function( gridMeta) {
    gridDf <- read.csv( gridMeta[ 1],
                       ## col.names= c( "cdl", "n")
                       )
    within( gridDf, {
      year <- gridMeta[ 2]
      stfips <- gridMeta[ 3]
      cofips <- gridMeta[ 4]
      simple <- cdlMeta[ as.character( cdl), "simple"]
      simple[ is.na( simple)] <- "Other"
    })
  }
  
  gridDf <- adply( gridMeta, 1, loadGridFile,
                  .parallel= TRUE)[, -1]
  
  numericSum <- function( x) sum( as.numeric( x))
  
  cellFiles <- list.files( "cells", patt= "csv$", full.names= TRUE)
  
  cellDf <- ldply( cellFiles, read.csv,
                  colClasses= c(
                    rep( "integer", 2),
                    rep( "character", 3)),
                  .parallel= TRUE)
  colnames( cellDf)[ 1:2] <- c( "grid", "N")
  
  merged <-
    merge( gridDf, cellDf,
          ## by= c( "grid", "stfips", "cofips", "year"),
          all.x= TRUE)

#+end_src

I used this to find cells with multiple counties/ alignments.

#+begin_src R :tangle false
  problemCells <-
    subset( ddply( merged, .(grid, year), summarize,
                  counties= length( unique( paste( stfips, cofips))),
                  align= length( unique( N)),
                  .parallel= TRUE,
                  .progress= "text"),
           counties > 1 & align > 1)
  
  ## rbind(
  ##   head( with( subset( problemCells, year == 2006),
  ##              problemCells[ order( -align, -counties),])),
  ##   head( with( subset( problemCells, year == 2008),
  ##            problemCells[ order( -align, -counties),])))
#+end_src

#+begin_src R
  head( with( problemCells, problemCells[ order( -align, -counties),]))
#+end_src

#+RESULTS:
| 2718509 | 2008 | 5 | 4 |
| 2735792 | 2008 | 5 | 4 |
| 2744299 | 2008 | 5 | 4 |
| 2830588 | 2006 | 5 | 4 |
| 2830588 | 2008 | 5 | 4 |
| 2934297 | 2008 | 5 | 4 |

** write out the results one file per grid cell to alleviate memory problems

#+begin_src R
  writeMergedByCell <- function( df, dest= "merged") {
    grid <- unique( df$grid)
    fn <- sprintf( "%s/%s/merged.csv", dest, grid)
    dir.create( dirname( fn))
    write.csv( fn, df, row.names= FALSE)
    fn
  }
  
  perCell <- dlply( merged, .(grid), writeMergedByCell,
                   .parallel= TRUE,
                   .progress= "text")
#+end_src
 
** look at an example to write the scaling operations

#+begin_src R
  csv <- read.csv( "merged/2718509/merged.csv")
  
  with( csv,
       unique( csv[ rev( order( year, stfips, cofips)),
                   c( "year", "stfips", "cofips", "N")]))
#+end_src

#+RESULTS:
| 2008 | 51 | 760 | 21723 |
| 2008 | 51 | 145 | 21722 |
| 2008 | 51 |  87 | 21718 |
| 2008 | 51 |  75 | 21721 |
| 2008 | 51 |  41 | 21718 |

#+begin_src R
  csv <-
    read.csv( "merged/2718509/merged.csv",
             colClasses= c(
               cofips= "factor",
               stfips= "factor"))
  levels( csv$simple) <-
    c( levels( csv$simple),
      as.character( cdlMeta$simple))
  
  csvCt <-
    dcast( csv,
          year+ grid + stfips + cofips + N ~ simple,
          fun.aggregate= numericSum,
          fill= 0, drop= FALSE, value.var= "n")
  
  csvIdVars <-
    c( "year", "grid", "stfips", "cofips", "N")
  
  csvFilled <-
    melt( csvCt[ , c( csvIdVars,
                     levels( cdlMeta$simple))],
         id.vars= csvIdVars,
         variable.name= "simple",
         value.name= "n")
  
  scalingFunction <- function( df) {
    res <-
      with( df,
           data.frame( n= weighted.mean(
                         x= n,
                         w= N) * nrow( df),
                      N= mean( N)))
    within( res, frac <- n / N)
  }
  
  csvScaled <-
    ddply( csvFilled,
          .( grid, year, simple),
          scalingFunction,
          .parallel= TRUE,
          .progress= "text")
  
  csvFracs <-
    dcast( csvScaled,
          grid + year ~ simple,
          value.var= "frac")
#+end_src

** now just wrap the above up into a function

#+begin_src R
    scaleFractions <-
      function( mergedCsvFn) ##,
               ## progress= "none",
               ## parallel= TRUE)
    {
      csv <-
      read.csv( mergedCsvFn,
                 colClasses= c(
                   cofips= "factor",
                   stfips= "factor"))
      levels( csv$simple) <-
        c( levels( csv$simple),
          as.character( cdlMeta$simple))
      csvCt <-
        dcast( csv,
              year+ grid + stfips + cofips + N ~ simple,
              fun.aggregate= numericSum,
              fill= 0, drop= FALSE, value.var= "n")
      csvFilled <-
        melt( csvCt[ , c( csvIdVars,
                         levels( cdlMeta$simple))],
             id.vars= csvIdVars,
             variable.name= "simple",
             value.name= "n")
      csvScaled <-
        ddply( csvFilled,
              .( grid, year, simple),
              scalingFunction)
      dcast( csvScaled,
            grid + year ~ simple,
            value.var= "frac",
            margins= "simple",
            fun.aggregate= sum)
    }
    
  registerDoMC( cores= 10)  
  cdlFracs <- ldply( perCell, scaleFractions, .progress= "text", .parallel= TRUE)
  
  cdlFracs <- within( cdlFracs, {
    grid <- as.character( grid)
    year <- as.character( year)
  })
  
  write.csv( format.df( cdlFracs,
                         dec= 3,
                         numeric.dollar= FALSE,
                         na.blank= TRUE),
              row.names= FALSE,
              file= "cdlGridSimple.csv",
              quote= FALSE)
  
  zip( "cdlSimple.zip", "cdlGridSimple.csv")
    
#+end_src


** TODO come up with better names for cellDf and gridDf
** TODO use common naming for CSV inputs (grid/cell)

